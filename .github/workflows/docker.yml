name: Create and publish a Docker image

on:
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HEALTH_CHECK_TIMEOUT: 10

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            ${{ github.event.release.prerelease == true && 'type=raw,value=pre-release' || 'type=raw,value=latest' }}

      - name: Build Docker image without push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run Docker container
        run: |
          IMAGE_TAGS=$(echo "${{ steps.meta.outputs.tags }}" | cut -d ' ' -f1 | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAGS" | cut -d ' ' -f1 | xargs)
          echo "Image tag to test: $IMAGE_TAG"
          docker run -d --name ollaix_ui -p 8000:8000 $IMAGE_TAG
          sleep ${{ env.HEALTH_CHECK_TIMEOUT }}

      - name: Stop Docker container
        run: docker stop ollaix_ui

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
